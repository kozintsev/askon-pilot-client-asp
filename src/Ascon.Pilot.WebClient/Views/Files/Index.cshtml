@using System.Threading.Tasks
@using Ascon.Pilot.Core
@model Ascon.Pilot.WebClient.ViewModels.UserPositionViewModel
@{
    ViewBag.Title = "Файлы";
    Layout = "_FilesLayout";
}

<form action="@Url.Action("DownloadArchive")" id="downloadArchiveForm">
    <div class="row">
        <div class="col-md-4 hidden-xs hidden-sm" id="sidePanel">
            @await Component.InvokeAsync("SidePanel", Model.CurrentFolderId)
        </div>
        <div class="col-md-8 col-sm-12" id="filesPanelContainer">
            <div>
                <ol class="breadcrumb" id="breadcrumbs"></ol>
            </div>
            <div id="filesPanel">
                @await Component.InvokeAsync("FilesPanel", Model.CurrentFolderId, Model.FilesPanelType)
            </div>
        </div>
    </div>
</form>

<div class="modal fade" id="viewModal" tabindex="-1" role="dialog" aria-labelledby="viewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="viewModalLabel">Просмотр</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-8" id="viewModalContent">
                    </div>
                    <div class="col-sm-4" id="viewModalInfo">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a class="btn btn-default" id="modalDownloadButton">
                    <i class="glyphicon glyphicon-download-alt"></i>&nbsp;Скачать
                </a>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        var baseFilesUrl = '/Files/Index/';
        var getFilesUrl = '@Html.Raw(Url.Action("GetObject", "Files"))';
        var getChildsUrl = '@Html.Raw(Url.Action("GetNodeChilds", "Files"))';
        var getSidePanelUrl = '@Html.Raw(Url.Action("SidePanel", "Files"))';
        var downloadUrl = '@Html.Raw(Url.Action("Download"))';
        var ROOT_ID = '@DObject.RootId';

        var treeControl;
        var treeData;

        $(document)
            .ready(function() {
                treeControl = createTreeView(treeData);
                setObjectIdsCheckCallback();
                var selected = treeControl.getSelected();
                var selectedNode = { id: '', text: 'Начало' };
                if (selected.length !== 0)
                    selectedNode = selected[0];
                $('#breadcrumbs').html(createHtmlForBreadcrumbs(selectedNode));
            });

        function processFileCardClick(el) {
            var fileCard = $(el);
            var id = fileCard.data('id');
            var name = fileCard.data('name');
            var size = fileCard.data('size');
            var ext = fileCard.data('ext');
            var typeid = fileCard.data('typeid');
            var query = jQuery.param({
                id: id,
                name: name,
                size: size
            });
            if (ext === '.pdf' || ext === '.xps') {
                if (ext === '.pdf') {
                    $('<a>', { href: '/Files/Preview?' + query, "class": "btn btn-default", target: "_blank", html: '<i class="glyphicon glyphicon-eye-open"></i> Просмотр' })
                        .appendTo($('.modal-footer'));
                }
                var url = '/Files/Thumbnail/' + id + '?size=' + size + '&extension=' + ext;
                $('#viewModalContent').html('<img src="' + url + '" alt="' + name + '"/>');
            } else {
                $('#viewModalContent').html('<img src="/Home/GetTypeIcon/' + typeid + '"/>');
            }

            $('#viewModalInfo')
                .html(objectToDlist({
                    "Размер": size + " байт",
                    "Название": name
                }));

            $('#modalDownloadButton').prop('href', downloadUrl + '?' + query);
            $('#viewModalLabel').text(name);
            $('#viewModal').modal();
        }

        function objectToDlist(obj) {
            var html = '<dl>';
            $.each(obj,
                function(propName, propValue) {
                    html += '<dt>' + propName + '</dt>';
                    html += '<dd>' + propValue + '</dd>';
                });
            return html + '</dl>';
        }

        function downloadArchive() {
            $('form#downloadArchiveForm').submit();
        }

        function setObjectIdsCheckCallback() {
            $('input[name="objectsIds"]')
                .on('click',
                    function() {
                        var btn = $('#downloadArchiveButton');
                        if ($('input[name="objectsIds"]:checked').length === 0)
                            btn.hide();
                        else
                            btn.show();
                    });
        }

        var recursiveFind = function(keyObj, tData) {
            var p, key, val, tRet;
            for (p in keyObj) {
                if (keyObj.hasOwnProperty(p)) {
                    key = p;
                    val = keyObj[p];
                }
            }
            for (p in tData) {
                if (tData.hasOwnProperty(p)) {
                    if (p === key) {
                        if (tData[p] === val) {
                            return tData;
                        }
                    } else if (tData[p] instanceof Object) {
                        if (tData.hasOwnProperty(p)) {
                            tRet = recursiveFind(keyObj, tData[p]);
                            if (tRet) {
                                return tRet;
                            }
                        }
                    }
                }
            }
            return false;
        };

        function pushHistory(id) {
            history.pushState(null, '', baseFilesUrl + id);
            document.title = $('#breadcrumbs li:last-child').text();
        }

        function createTreeView(data) {
            var tree = $('#tree');
            tree.treeview({
                data: data,
                showIcon: true,
                showTags: true,
                onNodeSelected: function(event, node) {
                    window.recieveFiles(node);
                },
                onNodeExpanded: function(event, node) {
                    var childNodes = node['nodes'];
                    if (childNodes.length === 0)
                        window.getChilds(node);
                }
            });
            return tree.treeview(true);
        }

        function getChilds(node) {
            var idWithChilds = node['id'];

            /*$.each($('#tree ul li'), function (i, e) {
                var el = $(e);
                if (el.data("nodeid") === node['nodeId'])
                    el.append('<span class="glyphicon glyphicon-refresh glyphicon-spin pull-right"></span>');
            });*/

            $.ajax(getChildsUrl,
            {
                data: {
                    id: idWithChilds
                },
                beforeSend: function() {
                    $('#sidePanelProgress').show();
                },
                success: function(data) {
                    var nodeToAppendChilds = recursiveFind({ id: idWithChilds }, treeData);
                    nodeToAppendChilds['nodes'] = data;

                    var expandedNodes = treeControl.getExpanded();
                    var selectedNode = treeControl.getSelected()[0];
                    treeControl.remove();
                    treeControl = createTreeView(treeData);

                    //var nodeId = node['nodeId'];
                    //treeControl.revealNode(nodeId, { silent: true });
                    $.each(expandedNodes,
                        function(i, e) {
                            treeControl.expandNode(e.nodeId, { silent: true });
                        });
                    //treeControl.unselectNode(treeControl.getSelected());
                    //treeControl.selectNode(selectedNode);
                },
                complete: function() {
                    $('#sidePanelProgress').hide();
                }
            });
        }

        function recieveFiles(node) {
            var folderId = node['id'];
            var filesPanel = $('#filesPanel');
            $.ajax(getFilesUrl,
            {
                data: {
                    id: folderId
                },
                beforeSend: function() {
                    $('#downloadArchiveButton').hide();
                    filesPanel
                        .html('<div class="text-center"><i style="font-size: 2em" class="glyphicon glyphicon-spin glyphicon-refresh"></i><br>загрузка</div>');
                },
                success: function(data) {
                    filesPanel.html(data);
                    pushHistory(folderId);
                    $('#breadcrumbs').html(createHtmlForBreadcrumbs(treeControl.getSelected()[0]));
                    setObjectIdsCheckCallback();
                },
                error: function(data) {
                    filesPanel.html('<div class="alert alert-danger"><p>при запросе файлов произошла ошибка</p></div>');
                }
            });
        }

        function createHtmlForBreadcrumbs(selectedNode) {
            function getBreadcrumbs(childNode, lBreadcrumbs) {
                var parent = treeControl.getParent(childNode);
                if (typeof parent != "undefined" && parent != null) {
                    lBreadcrumbs.push(parent);
                    return getBreadcrumbs(parent, lBreadcrumbs);
                } else {
                    return lBreadcrumbs;
                }
            }

            var breadcrumbs = [selectedNode];
            breadcrumbs = getBreadcrumbs(selectedNode, breadcrumbs);
            var html = '';
            for (var i = breadcrumbs.length - 1; i >= 0; i--) {
                html += (i === 0 ? '<li>' : '<li class="active">') +
                    '<a href="' +
                    baseFilesUrl +
                    breadcrumbs[i].id +
                    '">' +
                    breadcrumbs[i].text +
                    '</a></li>';
            }
            return html;
        }
    </script>
}